/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExportHTML.java
 *
 * Created on Dec 11, 2009, 4:54:36 PM
 */

package jFrontd.UI;

import Classes.FileManager;
import Classes.Globals;
import jFrontd.Classes.Emulator;
import jFrontd.Classes.FavoriteGame;
import jFrontd.Classes.Folder;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import javax.swing.JFileChooser;

/**
 *
 * @author sj
 */
public class ExportHTML extends javax.swing.JFrame {
    protected final String    Separator           = new String(System.getProperty("file.separator"));
    protected final String    home                = new String(System.getProperty("user.home"));
    protected final File      ConfigDir           = new File(home+Separator+".jFrontd");
    protected final File      IconDir             = new File(ConfigDir+Separator+"Icons");
    private Folder[] folder;
    private FavoriteGame[] favoritegame;
    private Emulator[] emulator;
    private String FavoriteIcon;
    private Exporting export;

    /** Creates new form ExportHTML */
    public ExportHTML(FavoriteGame[] favoritegame, Folder[] folder, Emulator[] emulator, String FavoriteIcon) {
        this.favoritegame   = favoritegame;
        this.folder         = folder;
        this.emulator       = emulator;
        this.FavoriteIcon   = FavoriteIcon;
        export = new Exporting();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPnlStatus = new javax.swing.JPanel();
        jLblStatus = new javax.swing.JLabel();
        jPrBExportHTML = new javax.swing.JProgressBar();
        jPnlOptions = new javax.swing.JPanel();
        jChkTitle = new javax.swing.JCheckBox();
        jTxtTitle = new javax.swing.JTextField();
        jChkCSS = new javax.swing.JCheckBox();
        jTxtCSS = new javax.swing.JTextField();
        jChkDir = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jBtnBrowse = new javax.swing.JButton();
        jTxtDir = new javax.swing.JTextField();
        jPnlFooter = new javax.swing.JPanel();
        jBtnExport = new javax.swing.JButton();
        jBtnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export HTML");

        jLblStatus.setText("Status");

        jPrBExportHTML.setMaximum(10);

        javax.swing.GroupLayout jPnlStatusLayout = new javax.swing.GroupLayout(jPnlStatus);
        jPnlStatus.setLayout(jPnlStatusLayout);
        jPnlStatusLayout.setHorizontalGroup(
            jPnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPrBExportHTML, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                    .addComponent(jLblStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPnlStatusLayout.setVerticalGroup(
            jPnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPrBExportHTML, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPnlOptions.setLayout(new java.awt.GridLayout(3, 0));

        jChkTitle.setText("Change Title");
        jChkTitle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChkTitleItemStateChanged(evt);
            }
        });
        jPnlOptions.add(jChkTitle);

        jTxtTitle.setText("jFrontd");
        jTxtTitle.setEnabled(false);
        jPnlOptions.add(jTxtTitle);

        jChkCSS.setText("Change CSS File");
        jChkCSS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChkCSSItemStateChanged(evt);
            }
        });
        jPnlOptions.add(jChkCSS);

        jTxtCSS.setText("style.css");
        jTxtCSS.setEnabled(false);
        jPnlOptions.add(jTxtCSS);

        jChkDir.setText("Change Directory");
        jChkDir.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChkDirItemStateChanged(evt);
            }
        });
        jPnlOptions.add(jChkDir);

        jBtnBrowse.setText("Browse...");
        jBtnBrowse.setEnabled(false);
        jBtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBrowseActionPerformed(evt);
            }
        });

        jTxtDir.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jTxtDir, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnBrowse))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnBrowse))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPnlOptions.add(jPanel1);

        jBtnExport.setText("Export");
        jBtnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnExportActionPerformed(evt);
            }
        });

        jBtnClose.setText("Close");
        jBtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlFooterLayout = new javax.swing.GroupLayout(jPnlFooter);
        jPnlFooter.setLayout(jPnlFooterLayout);
        jPnlFooterLayout.setHorizontalGroup(
            jPnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlFooterLayout.createSequentialGroup()
                .addContainerGap(379, Short.MAX_VALUE)
                .addComponent(jBtnClose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnExport)
                .addContainerGap())
        );
        jPnlFooterLayout.setVerticalGroup(
            jPnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlFooterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnExport)
                    .addComponent(jBtnClose))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPnlOptions, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addComponent(jPnlFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPnlStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPnlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPnlOptions, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPnlFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBtnCloseActionPerformed

    private void jBtnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExportActionPerformed
        //let the fun begin!
        //disable close
        jBtnClose.setEnabled(false);
        //create a thread for this shit
        export = new Exporting();
        export.start();
    }//GEN-LAST:event_jBtnExportActionPerformed

    private void jChkTitleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChkTitleItemStateChanged
        jTxtTitle.setEnabled(jChkTitle.isSelected());
    }//GEN-LAST:event_jChkTitleItemStateChanged

    private void jChkDirItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChkDirItemStateChanged
        jTxtDir.setEnabled(jChkDir.isSelected());
        jBtnBrowse.setEnabled(jChkDir.isSelected());
    }//GEN-LAST:event_jChkDirItemStateChanged

    private void jChkCSSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChkCSSItemStateChanged
        jTxtCSS.setEnabled(jChkCSS.isSelected());
    }//GEN-LAST:event_jChkCSSItemStateChanged

    private void jBtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBrowseActionPerformed
        //add a file chooser to browse for the file
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        //open it
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File tempfile = fc.getSelectedFile();
            //tempfile was selected
            jTxtDir.setText(tempfile.getPath());
        }
    }//GEN-LAST:event_jBtnBrowseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnBrowse;
    private javax.swing.JButton jBtnClose;
    private javax.swing.JButton jBtnExport;
    private javax.swing.JCheckBox jChkCSS;
    private javax.swing.JCheckBox jChkDir;
    private javax.swing.JCheckBox jChkTitle;
    private javax.swing.JLabel jLblStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPnlFooter;
    private javax.swing.JPanel jPnlOptions;
    private javax.swing.JPanel jPnlStatus;
    private javax.swing.JProgressBar jPrBExportHTML;
    private javax.swing.JTextField jTxtCSS;
    private javax.swing.JTextField jTxtDir;
    private javax.swing.JTextField jTxtTitle;
    // End of variables declaration//GEN-END:variables

    private class Exporting extends Thread{
        @Override
        public void run(){
            CreateHTML();
            jBtnClose.setEnabled(true);
        }
    }

    private void CreateHTML() {
        //set progress bar max value
        int maxval = favoritegame.length;
        int Progress = 0;
        for(int i=0;i<folder.length;i++){
            maxval += new File(folder[i].getPath()).list().length;
        }
        jPrBExportHTML.setMinimum(0);
        jPrBExportHTML.setMaximum(maxval);
        jPrBExportHTML.setValue(Progress);
        //check validity and/or use custom options
        //title
        String Title = new String();
        if(jChkTitle.isSelected()){
            Title = jTxtTitle.getText();
        }else{
            Title = "jFrontd";
        }

        //directory
        File Directory = new File(home+Globals.Separator+"jFrontd");
        if(jChkDir.isSelected()){
            Directory = new File(jTxtDir.getText());
        }
        if(!Directory.exists()){
            Directory.mkdirs();
        }

        //css file
        String CSS = new String("style.css");
        if(jChkCSS.isSelected()){
            File CSSFile = new File(Directory+Globals.Separator+jTxtCSS.getText());
            if(CSSFile.exists()){
                CSS = CSSFile.getName();
            }
        }

        //update
        UpdateStatus(Directory+" created");

        //copy CSS file
        if(!jChkCSS.isSelected()){
            File CSSFile = new File(Directory+Globals.Separator+"style.css");
            String Resource = new String("/jFrontd/data/style.css");
            FileManager.CopyFileFromResource(this.getClass(), Resource, CSSFile);

            //update
            UpdateStatus("CSS File copied");
        }

        File htmlfile = new File(Directory+Globals.Separator+"index.html");
        String Newline = Globals.Newline;

        //footer HTML string
        String footer = new String("<div class=\"footer\"><a href=#top>&#9650;</a></div>");
        //create the HTML string
        String htmltext = new String("" +
        "   <html>"+Newline+
        "       <head>"+Newline+
        "           <title>"+Newline+
        "               jFront'd"+Newline+
        "           </title>"+Newline+
        "           <link href=\""+CSS+"\" rel=\"stylesheet\" type=\"text/css\" />"+Newline+
        "        </head>"+Newline+
        "        <body>"+Newline+
        "            <div class=\"title\">"+Newline+
        "                "+Title+Newline+
        "            </div>");

        //update
        UpdateStatus("HTML Generation started");

        //favorites
        //copy favorite icon
        File FavIconFile = new File(IconDir+Globals.Separator+FavoriteIcon);
        File NewFavIconFile = new File(Directory+Globals.Separator+FavoriteIcon);
        FileManager.CopyFile(FavIconFile, NewFavIconFile);
        htmltext = htmltext.concat("<br />"+Newline+"<div class=\"header\">"+
        "           <table class=\"header\"><tr><td class=\"LeftCell\">"+
                "<a href=\"javascript:;\" onmousedown=\"if(document.getElementById('favorites').style.display"+
                "== 'none'){ document.getElementById('favorites').style.display = 'block'; }else{ "+
                "document.getElementById('favorites').style.display = 'none'; }\">"+
                    "<img src=\""+FavoriteIcon+"\">"+"Favorites</a></td>"+
                    "<td class=\"RightCell\">Count: "+favoritegame.length+"</td></tr></table>"+Newline);
        //container div start
        htmltext = htmltext.concat("<div id=\"favorites\" style=\"display:block\">");

        //update
        UpdateStatus("Favorites being generated");
        for(int i=0;i<favoritegame.length;i++){
            //find if we should display 1 or 2
            int mod = 0;
            mod = (i % 2)+1;
            //copy icon if it doesn't exist
            File NewIcon = new File(Directory+Globals.Separator+favoritegame[i].getIcon());
            if(!NewIcon.exists()){
                File Icon = new File(IconDir+Globals.Separator+favoritegame[i].getIcon());
                FileManager.CopyFile(Icon, NewIcon);
            }
            htmltext = htmltext.concat(
            "           <div class=\"game"+mod+"\"><img src=\""+favoritegame[i].getIcon()+"\">"+favoritegame[i].getName()+"</div>"+Newline);

            //update
            UpdateStatus("Favorites being generated   "+i+"/"+favoritegame.length);
            jPrBExportHTML.setValue(++Progress);
        }
        //end container div
        htmltext = htmltext.concat("</div>");
        //footer
        htmltext = htmltext.concat(footer+"</div>");

        //folders
        for(int i=0;i<folder.length;i++){
            //copy System and Game images if needed
            File NewIcon = new File(Directory+Globals.Separator+folder[i].getSystemIcon());
            if(!NewIcon.exists()){
                File Icon = new File(IconDir+Globals.Separator+folder[i].getSystemIcon());
                FileManager.CopyFile(Icon, NewIcon);
            }
            NewIcon = new File(Directory+Globals.Separator+folder[i].getGameIcon());
            if(!NewIcon.exists()){
                File Icon = new File(IconDir+Globals.Separator+folder[i].getGameIcon());
                FileManager.CopyFile(Icon, NewIcon);
            }
            //header
            File tempfile = new File(folder[i].getPath());
            String[] FileList = tempfile.list();
            Arrays.sort(FileList);
            if(folder[i].getMameROMs()){
                //create command array
                String[] cmdarray = new String[]{
                    emulator[folder[i].getEmu()].getPath(),
                    "-listfull"
                };
                //run the program etc
                try {
                    //run program
                    Process proc = Runtime.getRuntime().exec(cmdarray);
                    //get input: amount of lines
                    BufferedReader BReader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
                    int linecount = 0;
                    BReader.mark(1000000);
                    while ((BReader.readLine()) != null) {
                        linecount++;
                    }
                    BReader.reset();
                    String[] mameFull = new String[linecount];
                    //get input: contents of lines into an array
                    for(int j=0;j<linecount;j++){
                        mameFull[j] = new String(BReader.readLine());
                    }
                    //close reader
                    BReader.close();
                    //seperate array into listShort and listLong
                    String[] mameShort = new String[linecount-1];
                    String[] mameLong  = new String[linecount-1];
                    //shortnames: from beginning of line to first space
                    for(int j=1;j<linecount-1;j++){
                        int FirstSpace = mameFull[j].indexOf(" ");
                        mameShort[j-1] = mameFull[j].substring(0, FirstSpace);
                    }
                    //longnames: inbetween the quotes
                    for(int j=1;j<linecount-1;j++){
                        int QuoteBegin  = mameFull[j].indexOf("\"");
                        int QuoteEnd    = mameFull[j].indexOf("\"", QuoteBegin+1);
                        //int QuoteEnd    = mameFull[i].indexOf(mameFull[i].substring(QuoteBegin), QuoteBegin);
                        mameLong[j-1]   = mameFull[j].substring(QuoteBegin+1, QuoteEnd);
                    }
                    //lists generated
                    //strip extensions
                    String[] shownlist = Arrays.copyOf(FileList, FileList.length);
                    StripExtensions(shownlist, folder[i]);
                    //create a shownlist based off reallist, mameShort, mameLong
                    for(int j=0;j<FileList.length;j++){
                        //compare reallist[i] to mameshort[all] until a match, then use
                        //mamelong[x]
                        for(int x=0;x<mameShort.length;x++){
                            if(shownlist[j].equals(mameShort[x])){
                                FileList[j] = mameLong[x];
                                x = mameShort.length;
                            }
                        }
                    }
                }catch(Exception ex){
                    Globals.ShowError(ex);
                }
            }
            else if(!folder[i].getShowExtensions()){
                StripExtensions(FileList, folder[i]);
            }
            htmltext = htmltext.concat("<br />"+Newline+"<div class=\"header\">"+
            "           <table class=\"header\"><tr><td class=\"LeftCell\">"+
                "<a href=\"javascript:;\" onmousedown=\"if(document.getElementById('folder"+i+"').style.display"+
                "== 'none'){ document.getElementById('folder"+i+"').style.display = 'block'; }else{ "+
                "document.getElementById('folder"+i+"').style.display = 'none'; }\">"+
                        "<img src=\""+folder[i].getSystemIcon()+"\">"+folder[i].getName()+"</td>"+
                        "<td class=\"RightCell\">Count: "+FileList.length+"</td></tr></table>"+Newline);
            //list files
            //container div start
            htmltext = htmltext.concat("<div id=\"folder"+i+"\" style=\"display:none\">");
            for(int j=0;j<FileList.length;j++){
                //find if we should display 1 or 2
                int mod = 0;
                mod = (j % 2)+1;
                htmltext = htmltext.concat(
                "           <div class=\"game"+mod+"\"><img src=\""+folder[i].getGameIcon()+"\">"+FileList[j]+"</div>"+Newline);

                //update
                UpdateStatus("Folder \""+folder[i].getName()+"\" being generated   "+j+"/"+FileList.length);
                jPrBExportHTML.setValue(++Progress);
            }
            //end container div
            htmltext = htmltext.concat("</div>");
            //fooder
            htmltext = htmltext.concat(footer+"</div>");
        }


        //end
        htmltext = htmltext.concat("<p class=\"copyright\">Code generated by <a href=http://sj.arc-nova.org/>jFrontd</a></p>"+Newline+
    	"</body>"+Newline+
        "</html>");
        try{
            FileWriter fw = new FileWriter(htmlfile);
            fw.write(htmltext);
            fw.close();
            //update
            UpdateStatus("Done!");
        }catch(IOException ex){
            Globals.ShowError(ex);
        }
    }

    private String[] StripExtensions(String[] FileList, Folder curfolder) {
        for(int i=0;i<FileList.length;i++){
            String[] Filters = emulator[curfolder.getEmu()].getFileTypesArray();
            for(int j=0;j<Filters.length;j++){
                if(FileList[i].endsWith(Filters[j])){
                    int endindex = (FileList[i].length() - Filters[j].length());
                    FileList[i] = FileList[i].substring(0, endindex);
                }
            }
        }
        return FileList;
    }

    private void UpdateStatus(String status){
        jLblStatus.setText(status);
    }
}
