package jFrontd.UI;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import Classes.Globals;
import jFrontd.Classes.Emulator;
import jFrontd.Classes.FavoriteGame;
import jFrontd.Classes.Folder;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;
/*
 * SettingsWindow.java
 *
 * Created on May 12, 2009, 1:47:11 PM
 */

/**
 *
 * @author sj
 */
public class SettingsWindow extends javax.swing.JFrame {
    private String[] IconList;
    private String[] listinfo;
    private Folder[] folder;
    private Emulator[] emulator;
    private FavoriteGame[] favoritegame;
    private MainWindow mainwindow;

    //drag/drop variables
    private int         DragIndex, DragToIndex;
    private boolean     Dragging      = false;

    /** Creates new form SettingsWindow */
    public SettingsWindow(java.awt.Frame parent, boolean modal, MainWindow mainwindow) {
        initComponents();
        this.mainwindow = mainwindow;
        this.setVisible(true);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SettingsTab = new javax.swing.JTabbedPane();
        jPnlPreferences = new javax.swing.JPanel();
        jPnlIcons = new javax.swing.JPanel();
        jLblFavIcon = new javax.swing.JLabel();
        jCmbFavIcon = new javax.swing.JComboBox();
        jLblFavGameicon = new javax.swing.JLabel();
        jCmbFavGameIcon = new javax.swing.JComboBox();
        jPnlFolders = new javax.swing.JPanel();
        jBtnAddFolder = new javax.swing.JButton();
        jBtnDeleteFolder = new javax.swing.JButton();
        jBtnEditFolder = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLstFolders = new javax.swing.JList();
        jBtnFolderMoveUp = new javax.swing.JButton();
        jBtnFolderMoveDown = new javax.swing.JButton();
        jBtnSortFolders = new javax.swing.JButton();
        jPnlEmulators = new javax.swing.JPanel();
        jBtnAddEmulator = new javax.swing.JButton();
        jBtnDeleteEmulator = new javax.swing.JButton();
        jBtnEditEmulator = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLstEmulators = new javax.swing.JList();
        jBtnSortEmulators = new javax.swing.JButton();
        jBtnMoveEmulatorUp = new javax.swing.JButton();
        jBtnMoveEmulatorDown = new javax.swing.JButton();
        jPnlFavorites = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLstFavorites = new javax.swing.JList();
        jBtnAddFavorite = new javax.swing.JButton();
        jBtnDeleteFavorite = new javax.swing.JButton();
        jBtnEditFavorite = new javax.swing.JButton();
        jBtnSortFavoritesByName = new javax.swing.JButton();
        jBtnSortFavoritesByIcon = new javax.swing.JButton();
        jBtnMoveFavoriteUp = new javax.swing.JButton();
        jBtnMoveFavoriteDown = new javax.swing.JButton();
        jBtnSortPlayed = new javax.swing.JButton();
        jBtnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings");
        setResizable(false);

        jPnlPreferences.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlPreferencesComponentShown(evt);
            }
        });

        jPnlIcons.setBorder(javax.swing.BorderFactory.createTitledBorder("Icons"));
        jPnlIcons.setLayout(new java.awt.GridLayout(2, 0));

        jLblFavIcon.setText("Favorites");
        jPnlIcons.add(jLblFavIcon);

        jCmbFavIcon.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPnlIcons.add(jCmbFavIcon);

        jLblFavGameicon.setText("Favorite Game");
        jPnlIcons.add(jLblFavGameicon);

        jCmbFavGameIcon.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPnlIcons.add(jCmbFavGameIcon);

        javax.swing.GroupLayout jPnlPreferencesLayout = new javax.swing.GroupLayout(jPnlPreferences);
        jPnlPreferences.setLayout(jPnlPreferencesLayout);
        jPnlPreferencesLayout.setHorizontalGroup(
            jPnlPreferencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlPreferencesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPnlIcons, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPnlPreferencesLayout.setVerticalGroup(
            jPnlPreferencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlPreferencesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPnlIcons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(199, Short.MAX_VALUE))
        );

        SettingsTab.addTab("Preferences", jPnlPreferences);

        jPnlFolders.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlFoldersComponentShown(evt);
            }
        });

        jBtnAddFolder.setText("Add");
        jBtnAddFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddFolderActionPerformed(evt);
            }
        });

        jBtnDeleteFolder.setText("Delete");
        jBtnDeleteFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteFolderActionPerformed(evt);
            }
        });

        jBtnEditFolder.setText("Edit");
        jBtnEditFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditFolderActionPerformed(evt);
            }
        });

        jLstFolders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLstFoldersMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLstFoldersMouseReleased(evt);
            }
        });
        jLstFolders.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLstFoldersMouseDragged(evt);
            }
        });
        jScrollPane1.setViewportView(jLstFolders);

        jBtnFolderMoveUp.setText("Move Up");
        jBtnFolderMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFolderMoveUpActionPerformed(evt);
            }
        });

        jBtnFolderMoveDown.setText("Move Down");
        jBtnFolderMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFolderMoveDownActionPerformed(evt);
            }
        });

        jBtnSortFolders.setText("Sort (Name)");
        jBtnSortFolders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSortFoldersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlFoldersLayout = new javax.swing.GroupLayout(jPnlFolders);
        jPnlFolders.setLayout(jPnlFoldersLayout);
        jPnlFoldersLayout.setHorizontalGroup(
            jPnlFoldersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlFoldersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlFoldersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnAddFolder)
                    .addComponent(jBtnDeleteFolder)
                    .addComponent(jBtnEditFolder)
                    .addComponent(jBtnSortFolders)
                    .addComponent(jBtnFolderMoveUp)
                    .addComponent(jBtnFolderMoveDown))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPnlFoldersLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtnAddFolder, jBtnDeleteFolder, jBtnEditFolder, jBtnFolderMoveDown, jBtnFolderMoveUp, jBtnSortFolders});

        jPnlFoldersLayout.setVerticalGroup(
            jPnlFoldersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlFoldersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlFoldersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addGroup(jPnlFoldersLayout.createSequentialGroup()
                        .addComponent(jBtnAddFolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnDeleteFolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnEditFolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnSortFolders)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnFolderMoveUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnFolderMoveDown)))
                .addContainerGap())
        );

        SettingsTab.addTab("Folders", jPnlFolders);

        jPnlEmulators.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlEmulatorsComponentShown(evt);
            }
        });

        jBtnAddEmulator.setText("Add");
        jBtnAddEmulator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddEmulatorActionPerformed(evt);
            }
        });

        jBtnDeleteEmulator.setText("Delete");
        jBtnDeleteEmulator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteEmulatorActionPerformed(evt);
            }
        });

        jBtnEditEmulator.setText("Edit");
        jBtnEditEmulator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditEmulatorActionPerformed(evt);
            }
        });

        jLstEmulators.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLstEmulatorsMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLstEmulatorsMouseReleased(evt);
            }
        });
        jLstEmulators.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLstEmulatorsMouseDragged(evt);
            }
        });
        jScrollPane2.setViewportView(jLstEmulators);

        jBtnSortEmulators.setText("Sort (Name)");
        jBtnSortEmulators.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSortEmulatorsActionPerformed(evt);
            }
        });

        jBtnMoveEmulatorUp.setText("Move Up");
        jBtnMoveEmulatorUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnMoveEmulatorUpActionPerformed(evt);
            }
        });

        jBtnMoveEmulatorDown.setText("Move Down");
        jBtnMoveEmulatorDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnMoveEmulatorDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlEmulatorsLayout = new javax.swing.GroupLayout(jPnlEmulators);
        jPnlEmulators.setLayout(jPnlEmulatorsLayout);
        jPnlEmulatorsLayout.setHorizontalGroup(
            jPnlEmulatorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlEmulatorsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlEmulatorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnAddEmulator)
                    .addComponent(jBtnDeleteEmulator)
                    .addComponent(jBtnEditEmulator)
                    .addComponent(jBtnSortEmulators)
                    .addComponent(jBtnMoveEmulatorUp)
                    .addComponent(jBtnMoveEmulatorDown))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPnlEmulatorsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtnAddEmulator, jBtnDeleteEmulator, jBtnEditEmulator, jBtnMoveEmulatorDown, jBtnMoveEmulatorUp, jBtnSortEmulators});

        jPnlEmulatorsLayout.setVerticalGroup(
            jPnlEmulatorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlEmulatorsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlEmulatorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addGroup(jPnlEmulatorsLayout.createSequentialGroup()
                        .addComponent(jBtnAddEmulator)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnDeleteEmulator)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnEditEmulator)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnSortEmulators)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnMoveEmulatorUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnMoveEmulatorDown)))
                .addContainerGap())
        );

        SettingsTab.addTab("Emulators", jPnlEmulators);

        jPnlFavorites.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlFavoritesComponentShown(evt);
            }
        });

        jLstFavorites.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLstFavoritesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLstFavoritesMouseReleased(evt);
            }
        });
        jLstFavorites.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLstFavoritesMouseDragged(evt);
            }
        });
        jScrollPane3.setViewportView(jLstFavorites);

        jBtnAddFavorite.setText("Add");
        jBtnAddFavorite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddFavoriteActionPerformed(evt);
            }
        });

        jBtnDeleteFavorite.setText("Delete");
        jBtnDeleteFavorite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteFavoriteActionPerformed(evt);
            }
        });

        jBtnEditFavorite.setText("Edit");
        jBtnEditFavorite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditFavoriteActionPerformed(evt);
            }
        });

        jBtnSortFavoritesByName.setText("Sort (Name)");
        jBtnSortFavoritesByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSortFavoritesByNameActionPerformed(evt);
            }
        });

        jBtnSortFavoritesByIcon.setText("Sort(Icon)");
        jBtnSortFavoritesByIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSortFavoritesByIconActionPerformed(evt);
            }
        });

        jBtnMoveFavoriteUp.setText("Move Up");
        jBtnMoveFavoriteUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnMoveFavoriteUpActionPerformed(evt);
            }
        });

        jBtnMoveFavoriteDown.setText("Move Down");
        jBtnMoveFavoriteDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnMoveFavoriteDownActionPerformed(evt);
            }
        });

        jBtnSortPlayed.setText("Sort(Played)");
        jBtnSortPlayed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSortPlayedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlFavoritesLayout = new javax.swing.GroupLayout(jPnlFavorites);
        jPnlFavorites.setLayout(jPnlFavoritesLayout);
        jPnlFavoritesLayout.setHorizontalGroup(
            jPnlFavoritesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlFavoritesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlFavoritesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlFavoritesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jBtnDeleteFavorite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnAddFavorite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnEditFavorite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnSortFavoritesByName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnSortFavoritesByIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnSortPlayed))
                    .addComponent(jBtnMoveFavoriteUp, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .addComponent(jBtnMoveFavoriteDown, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPnlFavoritesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtnAddFavorite, jBtnDeleteFavorite, jBtnEditFavorite, jBtnMoveFavoriteDown, jBtnMoveFavoriteUp, jBtnSortFavoritesByIcon, jBtnSortFavoritesByName, jBtnSortPlayed});

        jPnlFavoritesLayout.setVerticalGroup(
            jPnlFavoritesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlFavoritesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlFavoritesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addGroup(jPnlFavoritesLayout.createSequentialGroup()
                        .addComponent(jBtnAddFavorite)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnDeleteFavorite)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnEditFavorite)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnSortFavoritesByName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnSortFavoritesByIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnSortPlayed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnMoveFavoriteUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnMoveFavoriteDown)))
                .addContainerGap())
        );

        SettingsTab.addTab("Favorites", jPnlFavorites);

        jBtnClose.setText("Close");
        jBtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(381, Short.MAX_VALUE)
                .addComponent(jBtnClose)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(SettingsTab, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(329, Short.MAX_VALUE)
                .addComponent(jBtnClose)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(SettingsTab, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(27, Short.MAX_VALUE)))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-451)/2, (screenSize.height-384)/2, 451, 384);
    }// </editor-fold>//GEN-END:initComponents

    private void LoadFavorites(){
        favoritegame = new FavoriteGame[mainwindow.FavoriteDir.list().length];
        for(int i=0;i<favoritegame.length;i++){
            favoritegame[i] = new FavoriteGame(i);
        }
    }

    private boolean noneSelected(JList templist)
    {
        if (templist.isSelectionEmpty())
            Globals.ShowError("Nothing Selected");
        return templist.isSelectionEmpty();
    }

    private void createFolders(){
        //Check to make sure the folder directory exists, if not: make it
        if (!mainwindow.FolderDir.exists()){
            mainwindow.FolderDir.mkdir();
        }
        //initialize folder array
        folder = new Folder[mainwindow.FolderDir.list().length];
        //create folder variables
        for (int i=0;i<mainwindow.FolderDir.list().length;i++){
            folder[i] = new Folder(i);
        }
    }

    private void createEmulators(){
        //Check to make sure the emulator directory exists, if not: make it
        if (!mainwindow.EmulatorDir.exists()){
            mainwindow.EmulatorDir.mkdir();
        }
        //initialize folder array
        emulator = new Emulator[mainwindow.EmulatorDir.list().length];
        //create folder variables
        for (int i=0;i<mainwindow.EmulatorDir.list().length;i++){
            emulator[i] = new Emulator(i);
        }
    }

    public void FillList(int iType){
        switch (iType){
            case 0:
                createFolders();
                listinfo = mainwindow.FolderDir.list();
                java.util.Arrays.sort(listinfo);
                jLstFolders.setModel(new javax.swing.AbstractListModel() {
                    public int getSize() {
                        return listinfo.length;
                    }
                    public Object getElementAt(int index) {
                        return folder[index].getName();
                    }
                });
                break;
            case 1:
                createEmulators();
                listinfo = mainwindow.EmulatorDir.list();
                java.util.Arrays.sort(listinfo);
                jLstEmulators.setModel(new javax.swing.AbstractListModel() {
                    public int getSize() {
                        return listinfo.length;
                    }
                    public Object getElementAt(int index) {
                        return emulator[index].getName();
                    }
                });
                break;
            case 2:
                LoadFavorites();
                listinfo = mainwindow.FavoriteDir.list();
                jLstFavorites.setModel(new javax.swing.AbstractListModel() {
                    public int getSize() {
                        return listinfo.length;
                    }
                    public Object getElementAt(int index) {
                        return favoritegame[index].getName();
                    }
                });
                break;
            default:
                return;
        }
    }

    private void jBtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCloseActionPerformed
        //set new icons
        mainwindow.FavoriteIcon     = IconList[jCmbFavIcon.getSelectedIndex()];
        mainwindow.FavoriteGameIcon = IconList[jCmbFavGameIcon.getSelectedIndex()];
        //save settings
        mainwindow.SaveConfig();
        //reload lists
        mainwindow.init();
        //close window
        this.dispose();
}//GEN-LAST:event_jBtnCloseActionPerformed

    private void jPnlEmulatorsComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlEmulatorsComponentShown
    FillList(1);
}//GEN-LAST:event_jPnlEmulatorsComponentShown

    private void jBtnEditEmulatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditEmulatorActionPerformed
        if (noneSelected(jLstEmulators)){
            return;
        }
        EmulatorEditWindow Ee = null;
        Ee = new EmulatorEditWindow(this, true, new Emulator(jLstEmulators.getSelectedIndex()));
        Ee.setVisible(true);
        while(Ee.isVisible()){
            try {
                this.wait();
            } catch (InterruptedException ex) {}
        }
        FillList(1);
}//GEN-LAST:event_jBtnEditEmulatorActionPerformed

    private void jBtnDeleteEmulatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteEmulatorActionPerformed
        if (noneSelected(jLstEmulators)){
            return;
        }
        //ask if the user is sure that they want to delete the emulator
        if(JOptionPane.showConfirmDialog
                (null, "Are you sure you want to delete this Emulator?")<1) {
            //delete the emulator
            new Emulator(jLstEmulators.getSelectedIndex()).DeleteFile();
            JOptionPane.showMessageDialog(null, "Emulator deleted");
            //refill list
            FillList(1);
        }
}//GEN-LAST:event_jBtnDeleteEmulatorActionPerformed

    private void jBtnAddEmulatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddEmulatorActionPerformed
        EmulatorAddWindow Ea = new EmulatorAddWindow(this, true);
        Ea.setVisible(true);
        while(Ea.isVisible()){
            try {
                this.wait();
            } catch (InterruptedException ex) {
                Globals.ShowError(ex);
            }
        }
        FillList(1);
}//GEN-LAST:event_jBtnAddEmulatorActionPerformed

    private void jPnlFoldersComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlFoldersComponentShown
        //Populate the Folder List
        FillList(0);
}//GEN-LAST:event_jPnlFoldersComponentShown

    private void jBtnEditFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditFolderActionPerformed
        if (noneSelected(jLstFolders)){
            return;
        }
        FolderEditWindow fe = null;
        fe = new FolderEditWindow(this, true, new Folder(jLstFolders.getSelectedIndex()), mainwindow);
        fe.setVisible(true);
        while(fe.isVisible()){
            try {
                this.wait();
            } catch (InterruptedException ex) {
                Globals.ShowError(ex);
            }
        }
        FillList(0);
}//GEN-LAST:event_jBtnEditFolderActionPerformed

    private void jBtnDeleteFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteFolderActionPerformed
        if (noneSelected(jLstFolders)){
            return;
        }
        //ask if the user is sure that they want to delete the folder
        if(JOptionPane.showConfirmDialog
                (null, "Are you sure you want to delete this file?")<1){
            //delete the folder
            new Folder(jLstFolders.getSelectedIndex()).Delete();
            //refill list
            FillList(0);
            //update main window
            mainwindow.init();
        }
}//GEN-LAST:event_jBtnDeleteFolderActionPerformed

    private void jBtnAddFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddFolderActionPerformed
        FolderAddWindow fa = new FolderAddWindow(this, true, mainwindow);
        fa.setVisible(true);
        while (fa.isVisible()) {
            try {
                this.wait();
            } catch (InterruptedException ex) {
                Globals.ShowError(ex);
            }
        }
        FillList(0);
}//GEN-LAST:event_jBtnAddFolderActionPerformed

    private void jPnlPreferencesComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlPreferencesComponentShown
        //load config file
        mainwindow.LoadConfig();
        //load icons
        IconList = mainwindow.IconDir.list();
        Arrays.sort(IconList);
        //display icons
        jCmbFavGameIcon.removeAllItems();
        jCmbFavIcon.removeAllItems();
        for(int i=0;i<IconList.length;i++){
            jCmbFavGameIcon.addItem(new ImageIcon(mainwindow.IconDir+Globals.Separator+IconList[i]));
            jCmbFavIcon.addItem(new ImageIcon(mainwindow.IconDir+Globals.Separator+IconList[i]));
        }
        //find index of selected icons
        int FavIndex        = 0;
        int FavGameIndex    = 0;
        for(int i=0;i<IconList.length;i++){
            if(mainwindow.FavoriteIcon.equals(IconList[i])){
                FavIndex = i;
            }
            if(mainwindow.FavoriteGameIcon.equals(IconList[i])){
                FavGameIndex = i;
            }
        }
        //display selected icons
        jCmbFavIcon.setSelectedIndex(FavIndex);
        jCmbFavGameIcon.setSelectedIndex(FavGameIndex);
    }//GEN-LAST:event_jPnlPreferencesComponentShown

    private void jBtnAddFavoriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddFavoriteActionPerformed
        FavoriteAddWindow FAW = new FavoriteAddWindow(mainwindow, this);
        FAW.setVisible(true);
    }//GEN-LAST:event_jBtnAddFavoriteActionPerformed

    private void jBtnDeleteFavoriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteFavoriteActionPerformed
        //make sure something is selected
        if(jLstFavorites.isSelectionEmpty()){
            return;
        }else{
            //add totals to pref file
            mainwindow.OtherTimeWasted += favoritegame[jLstFavorites.getSelectedIndex()].getTimeWasted();
            mainwindow.OtherTimesPlayed += favoritegame[jLstFavorites.getSelectedIndex()].getTimesPlayed();
            mainwindow.SaveConfig();
            favoritegame[jLstFavorites.getSelectedIndex()].DeleteFile();
            FillList(2);
            if(mainwindow.FavoritesSelected){
                mainwindow.init();
                mainwindow.LoadFavorites();
                mainwindow.jTreeFolders.setSelectionRows(new int[]{0});
            }
        }
    }//GEN-LAST:event_jBtnDeleteFavoriteActionPerformed

    private void jBtnEditFavoriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditFavoriteActionPerformed
        //make sure something is selected
        if(jLstFavorites.isSelectionEmpty()){
            return;
        }else{
            FavoriteEditWindow FEW = new FavoriteEditWindow(mainwindow, favoritegame[jLstFavorites.getSelectedIndex()], this);
            FEW.setVisible(true);
        }
    }//GEN-LAST:event_jBtnEditFavoriteActionPerformed

    private void jPnlFavoritesComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlFavoritesComponentShown
        //display favorites
        FillList(2);
    }//GEN-LAST:event_jPnlFavoritesComponentShown

    private void jBtnMoveFavoriteUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnMoveFavoriteUpActionPerformed
        if(jLstFavorites.isSelectionEmpty()){
            return;
        }else{
            favoritegame[jLstFavorites.getSelectedIndex()].MoveUp();
            FillList(2);
            mainwindow.init();
            mainwindow.LoadFavorites();
            if(mainwindow.FavoritesSelected){
                mainwindow.jTreeFolders.setSelectionRows(new int[]{0});
            }
        }
    }//GEN-LAST:event_jBtnMoveFavoriteUpActionPerformed

    private void jBtnMoveFavoriteDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnMoveFavoriteDownActionPerformed
        if(jLstFavorites.isSelectionEmpty()){
            return;
        }else{
            favoritegame[jLstFavorites.getSelectedIndex()].MoveDown();
            FillList(2);
            mainwindow.init();
            mainwindow.LoadFavorites();
            if(mainwindow.FavoritesSelected){
                mainwindow.jTreeFolders.setSelectionRows(new int[]{0});
            }
        }
    }//GEN-LAST:event_jBtnMoveFavoriteDownActionPerformed

    private void jBtnSortFavoritesByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSortFavoritesByNameActionPerformed
            mainwindow.SortFGByName();
            FillList(2);
            mainwindow.init();
            mainwindow.LoadFavorites();
            if(mainwindow.FavoritesSelected){
                mainwindow.jTreeFolders.setSelectionRows(new int[]{0});
            }
    }//GEN-LAST:event_jBtnSortFavoritesByNameActionPerformed

    private void jBtnSortFavoritesByIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSortFavoritesByIconActionPerformed
            mainwindow.SortFGByIcon();
            FillList(2);
            mainwindow.init();
            mainwindow.LoadFavorites();
            if(mainwindow.FavoritesSelected){
                mainwindow.jTreeFolders.setSelectionRows(new int[]{0});
            }
    }//GEN-LAST:event_jBtnSortFavoritesByIconActionPerformed

    private void jBtnSortPlayedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSortPlayedActionPerformed
            mainwindow.SortFGByTimesPlayed();
            FillList(2);
            mainwindow.init();
            mainwindow.LoadFavorites();
            if(mainwindow.FavoritesSelected){
                mainwindow.jTreeFolders.setSelectionRows(new int[]{0});
            }
    }//GEN-LAST:event_jBtnSortPlayedActionPerformed

    private void jBtnFolderMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFolderMoveUpActionPerformed
        if(jLstFolders.isSelectionEmpty()){
            return;
        }else{
            folder[jLstFolders.getSelectedIndex()].MoveUp();
            FillList(0);
            mainwindow.init();
            mainwindow.jTreeFolders.setSelectionRow(jLstFolders.getSelectedIndex()+1);
        }
    }//GEN-LAST:event_jBtnFolderMoveUpActionPerformed

    private void jBtnFolderMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFolderMoveDownActionPerformed
        if(jLstFolders.isSelectionEmpty()){
            return;
        }else{
            folder[jLstFolders.getSelectedIndex()].MoveDown();
            FillList(0);
            mainwindow.init();
            mainwindow.jTreeFolders.setSelectionRow(jLstFolders.getSelectedIndex()+1);
        }
    }//GEN-LAST:event_jBtnFolderMoveDownActionPerformed

    private void jBtnSortFoldersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSortFoldersActionPerformed
        mainwindow.SortFoldersByName();
        FillList(0);
        mainwindow.init();
        mainwindow.jTreeFolders.setSelectionRow(jLstFolders.getSelectedIndex()+1);
    }//GEN-LAST:event_jBtnSortFoldersActionPerformed

    private void jBtnSortEmulatorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSortEmulatorsActionPerformed
        mainwindow.SortEmulatorsByName();
        FillList(1);
        mainwindow.init();
        if(mainwindow.FavoritesSelected){
            mainwindow.LoadFavorites();
            mainwindow.jTreeFolders.setSelectionRow(0);
        }
    }//GEN-LAST:event_jBtnSortEmulatorsActionPerformed

    private void jBtnMoveEmulatorUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnMoveEmulatorUpActionPerformed
        if(jLstEmulators.isSelectionEmpty()){
            return;
        }else{
            emulator[jLstEmulators.getSelectedIndex()].MoveUp();
            FillList(1);
            mainwindow.init();
            if(mainwindow.FavoritesSelected){
                mainwindow.LoadFavorites();
                mainwindow.jTreeFolders.setSelectionRow(0);
            }
        }
    }//GEN-LAST:event_jBtnMoveEmulatorUpActionPerformed

    private void jBtnMoveEmulatorDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnMoveEmulatorDownActionPerformed
        if(jLstEmulators.isSelectionEmpty()){
            return;
        }else{
            emulator[jLstEmulators.getSelectedIndex()].MoveDown();
            FillList(1);
            mainwindow.init();
            if(mainwindow.FavoritesSelected){
                mainwindow.LoadFavorites();
                mainwindow.jTreeFolders.setSelectionRow(0);
            }
        }
    }//GEN-LAST:event_jBtnMoveEmulatorDownActionPerformed

    private void jLstFavoritesMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstFavoritesMouseDragged
        //set dragging to true if needed
        if(!Dragging){
            Dragging = true;
        }
        //change drag-to index
        jLstFavorites.setSelectedIndex(jLstFavorites.locationToIndex(evt.getPoint()));
        DragToIndex = jLstFavorites.getSelectedIndex();
        if(DragToIndex < 0){
            //dont go past the first or last
            return;
        }else if(DragToIndex >= favoritegame.length){
            return;
        }
        //Move the game up/down
        if(DragIndex == DragToIndex){
            //no change, do nothing
            return;
        }else{
            //move it
            favoritegame[DragIndex].MoveTo(DragToIndex);
            DragIndex = DragToIndex;
            //update lists etc
            FillList(2);
            jLstFavorites.setSelectedIndex(DragToIndex);
        }
    }//GEN-LAST:event_jLstFavoritesMouseDragged

    private void jLstFoldersMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstFoldersMouseDragged
        //set dragging to true if needed
        if(!Dragging){
            Dragging = true;
        }
        //change drag-to index
        jLstFolders.setSelectedIndex(jLstFolders.locationToIndex(evt.getPoint()));
        DragToIndex = jLstFolders.getSelectedIndex();
        if(DragToIndex < 0){
            //dont go past the first or last
            return;
        }else if(DragToIndex >= folder.length){
            return;
        }
        //Move the game up/down
        if(DragIndex == DragToIndex){
            //no change, do nothing
            return;
        }else{
            //move it
            folder[DragIndex].MoveTo(DragToIndex);
            DragIndex = DragToIndex;
            //update lists etc
            FillList(0);
            jLstFolders.setSelectedIndex(DragToIndex);
        }
    }//GEN-LAST:event_jLstFoldersMouseDragged

    private void jLstFoldersMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstFoldersMousePressed
        jLstFolders.setSelectedIndex(jLstFolders.locationToIndex(evt.getPoint()));
        DragIndex = jLstFolders.getSelectedIndex();
    }//GEN-LAST:event_jLstFoldersMousePressed

    private void jLstFoldersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstFoldersMouseReleased
        if(Dragging){
            Dragging = false;
            mainwindow.init();
        }
    }//GEN-LAST:event_jLstFoldersMouseReleased

    private void jLstEmulatorsMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstEmulatorsMouseDragged
        //set dragging to true if needed
        if(!Dragging){
            Dragging = true;
        }
        //change drag-to index
        jLstEmulators.setSelectedIndex(jLstEmulators.locationToIndex(evt.getPoint()));
        DragToIndex = jLstEmulators.getSelectedIndex();
        if(DragToIndex < 0){
            //dont go past the first or last
            return;
        }else if(DragToIndex >= emulator.length){
            return;
        }
        //Move the game up/down
        if(DragIndex == DragToIndex){
            //no change, do nothing
            return;
        }else{
            //move it
            emulator[DragIndex].MoveTo(DragToIndex);
            DragIndex = DragToIndex;
            //update lists etc
            FillList(1);
            jLstEmulators.setSelectedIndex(DragToIndex);
        }
    }//GEN-LAST:event_jLstEmulatorsMouseDragged

    private void jLstEmulatorsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstEmulatorsMousePressed
        jLstEmulators.setSelectedIndex(jLstEmulators.locationToIndex(evt.getPoint()));
        DragIndex = jLstEmulators.getSelectedIndex();
    }//GEN-LAST:event_jLstEmulatorsMousePressed

    private void jLstEmulatorsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstEmulatorsMouseReleased
        if(Dragging){
            Dragging = false;
            mainwindow.init();
            if(mainwindow.FavoritesSelected){
                mainwindow.LoadFavorites();
                mainwindow.jTreeFolders.setSelectionRow(0);
            }
        }
    }//GEN-LAST:event_jLstEmulatorsMouseReleased

    private void jLstFavoritesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstFavoritesMousePressed
        jLstFavorites.setSelectedIndex(jLstFavorites.locationToIndex(evt.getPoint()));
        DragIndex = jLstFavorites.getSelectedIndex();
    }//GEN-LAST:event_jLstFavoritesMousePressed

    private void jLstFavoritesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstFavoritesMouseReleased
        if(Dragging){
            Dragging = false;
            mainwindow.init();
            if(mainwindow.FavoritesSelected){
                mainwindow.LoadFavorites();
                mainwindow.jTreeFolders.setSelectionRow(0);
            }
        }
    }//GEN-LAST:event_jLstFavoritesMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane SettingsTab;
    private javax.swing.JButton jBtnAddEmulator;
    private javax.swing.JButton jBtnAddFavorite;
    private javax.swing.JButton jBtnAddFolder;
    private javax.swing.JButton jBtnClose;
    private javax.swing.JButton jBtnDeleteEmulator;
    private javax.swing.JButton jBtnDeleteFavorite;
    private javax.swing.JButton jBtnDeleteFolder;
    private javax.swing.JButton jBtnEditEmulator;
    private javax.swing.JButton jBtnEditFavorite;
    private javax.swing.JButton jBtnEditFolder;
    private javax.swing.JButton jBtnFolderMoveDown;
    private javax.swing.JButton jBtnFolderMoveUp;
    private javax.swing.JButton jBtnMoveEmulatorDown;
    private javax.swing.JButton jBtnMoveEmulatorUp;
    private javax.swing.JButton jBtnMoveFavoriteDown;
    private javax.swing.JButton jBtnMoveFavoriteUp;
    private javax.swing.JButton jBtnSortEmulators;
    private javax.swing.JButton jBtnSortFavoritesByIcon;
    private javax.swing.JButton jBtnSortFavoritesByName;
    private javax.swing.JButton jBtnSortFolders;
    private javax.swing.JButton jBtnSortPlayed;
    private javax.swing.JComboBox jCmbFavGameIcon;
    private javax.swing.JComboBox jCmbFavIcon;
    private javax.swing.JLabel jLblFavGameicon;
    private javax.swing.JLabel jLblFavIcon;
    private javax.swing.JList jLstEmulators;
    private javax.swing.JList jLstFavorites;
    private javax.swing.JList jLstFolders;
    private javax.swing.JPanel jPnlEmulators;
    private javax.swing.JPanel jPnlFavorites;
    private javax.swing.JPanel jPnlFolders;
    private javax.swing.JPanel jPnlIcons;
    private javax.swing.JPanel jPnlPreferences;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}